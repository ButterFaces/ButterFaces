<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE facelet-taglib PUBLIC
        "-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN"
        "http://java.sun.com/dtd/facelet-taglib_1_0.dtd">
<facelet-taglib version="2.2"
                xmlns="http://xmlns.jcp.org/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_2_2.xsd"
                id="b">
   <namespace>http://butterfaces.larmic.de/components</namespace>

   <tag>
      <tag-name>text</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.text</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>type</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>pattern</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>min</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>max</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>
   <tag>
      <tag-name>maskedText</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.maskedText</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>type</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>pattern</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>min</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>max</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>inputMask</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>
   <tag>
      <tag-name>calendar</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.calendar</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>glyphiconTime</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>glyphiconDate</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>glyphiconUp</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>glyphiconDown</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>language</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>sideBySide</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>pickDate</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>pickTime</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>
   <tag>
      <tag-name>tags</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.tags</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>maxTags</name>
         <description>When set, no more than the given number of tags are allowed to add (default: undefined). When maxTags is reached, a class 'bootstrap-tagsinput-max' is placed on the tagsinput element.</description>
         <type>java.lang.Integer</type>
      </attribute>
      <attribute>
         <name>confirmKeys</name>
         <description>Array of keycodes which will add a tag when typing in the input. (default: [13, 188], which are ENTER and comma)</description>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>maxChars</name>
         <description>Defines the maximum length of a single tag. (default: undefined)</description>
         <type>java.lang.Integer</type>
      </attribute>
      <attribute>
         <name>trimValue</name>
         <description>When true, automatically removes all whitespace around tags. (default: false)</description>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>allowDuplicates</name>
         <description>When true, the same tag can be added multiple times. (default: false)</description>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>
   <tag>
      <tag-name>number</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.number</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>tooltip</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>min</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>max</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>step</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>secret</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.secret</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>textArea</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.textArea</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>maxLength</name>
         <type>java.lang.Integer</type>
      </attribute>
      <attribute>
         <name>expandable</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>placeholder</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>comboBox</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.comboBox</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>filterable</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>layout</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>radioBox</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.radioBox</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>checkBox</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.checkBox</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>value</name>
         <required>true</required>
      </attribute>
      <attribute>
         <name>description</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>readonly</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>autoFocus</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>required</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>section</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.section</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>badgeText</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>tooltip</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.tooltip</component-type>
      </component>
      <attribute>
         <name>for</name>
         <type>java.lang.String</type>
         <description>jQuery selector. Could be empty if tooltip component is embedded in a ButterFaces component.</description>
      </attribute>
      <attribute>
         <name>title</name>
         <type>java.lang.String</type>
         <description>Tooltip title. If title if empty no title will be displayed.</description>
      </attribute>
      <attribute>
         <name>trigger</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placement</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>placementFunction</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>minVerticalOffset</name>
         <type>java.lang.Integer</type>
      </attribute>
      <attribute>
         <name>minHorizontalOffset</name>
         <type>java.lang.Integer</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>onShow</name>
         <type>java.lang.String</type>
         <description>This event fires immediately when the show instance method is called.</description>
      </attribute>
      <attribute>
         <name>onShown</name>
         <type>java.lang.String</type>
         <description>This event is fired when the popover has been made visible to the user (will wait for CSS transitions to complete).</description>
      </attribute>
      <attribute>
         <name>onHide</name>
         <type>java.lang.String</type>
         <description>This event is fired immediately when the hide instance method has been called.</description>
      </attribute>
      <attribute>
         <name>onHidden</name>
         <type>java.lang.String</type>
         <description>This event is fired when the popover has finished being hidden from the user (will wait for CSS transitions to complete).</description>
      </attribute>
   </tag>

   <tag>
      <tag-name>modalPanel</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.modal</component-type>
      </component>
      <attribute>
         <name>title</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>cancelButtonText</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>onShow</name>
         <type>java.lang.String</type>
         <description>This event fires immediately when the show instance method is called. If caused by a click, the clicked element is available as the relatedTarget property of the event.</description>
      </attribute>
      <attribute>
         <name>onShown</name>
         <type>java.lang.String</type>
         <description>This event is fired when the modal has been made visible to the user (will wait for CSS transitions to complete). If caused by a click, the clicked element is available as the relatedTarget property of the event.</description>
      </attribute>
      <attribute>
         <name>onHide</name>
         <type>java.lang.String</type>
         <description>This event is fired immediately when the hide instance method has been called.</description>
      </attribute>
      <attribute>
         <name>onHidden</name>
         <type>java.lang.String</type>
         <description>This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).</description>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>prettyprint</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.prettyprint</component-type>
      </component>
      <attribute>
         <name>language</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>table</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.table</component-type>
      </component>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>var</name>
         <type>java.lang.String</type>
         <required>true</required>
      </attribute>
      <attribute>
         <name>uniqueIdentifier</name>
         <type>java.lang.String</type>
         <description>If unique identifier is set it will be used for table model (instead of client id)</description>
      </attribute>
      <attribute>
         <name>value</name>
         <type>java.lang.Object</type>
         <required>true</required>
      </attribute>
      <attribute>
         <name>singleSelectionListener</name>
         <type>de.larmic.butterfaces.event.TableSingleSelectionListener</type>
         <required>false</required>
      </attribute>
      <attribute>
         <name>model</name>
         <type>de.larmic.butterfaces.model.table.TableModel</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Set tableCondensed to true to make table more compact by cutting cell padding in half. Default
            is false.
         </description>
         <name>tableCondensed</name>
         <type>java.lang.Boolean</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Set tableBordered to true for borders on all sides of the table and cells. Default is false.
         </description>
         <name>tableBordered</name>
         <type>java.lang.Boolean</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Set tableBordered to true to add zebra-striping to any table row within the table body. Default
            is true.
         </description>
         <name>tableStriped</name>
         <type>java.lang.Boolean</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Unique row object identifier. If no identifier is set system hashcode will be used as fallback. Unique identifier is used to update table selection after render table.</description>
         <name>rowIdentifierProperty</name>
         <type>java.lang.String</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Optional row style class</description>
         <name>rowClass</name>
         <type>java.lang.String</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Disables regions to render after request while (ajax) request is running. Default is true.
         </description>
         <name>ajaxDisableRenderRegionsOnRequest</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>
   <tag>
      <tag-name>tableToolbar</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.table.toolbar</component-type>
      </component>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <description>Table client id the table header belongs to.</description>
         <name>tableId</name>
         <type>java.lang.Boolean</type>
         <required>true</required>
      </attribute>
      <attribute>
         <description>A listener called if toolbar refresh button is clicked.
         </description>
         <name>refreshListener</name>
         <type>de.larmic.butterfaces.model.table.TableToolbarRefreshListener</type>
         <required>false</required>
      </attribute>
      <attribute>
         <description>Disables regions to render after request while (ajax) request is running. Default is true.
         </description>
         <name>ajaxDisableRenderRegionsOnRequest</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>column</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.column</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>uniqueIdentifier</name>
         <type>java.lang.String</type>
         <description>If unique identifier is set it will be used for table model (instead of client id)</description>
      </attribute>
      <attribute>
         <description>HTML table colgroup column width. Could be in px, percent or relative.</description>
         <name>colWidth</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>hideColumn</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>sortColumnEnabled</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <description>Optional parameter will be assigned to table sort model if set.</description>
         <name>sortBy</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>activateLibraries</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.activateLibraries</component-type>
      </component>
   </tag>

   <tag>
      <description>
         &lt;p&gt;&lt;span
         class="changed_modified_2_0"&gt;Render&lt;/span&gt; an HTML "a"
         anchor
         element that acts like a form submit button when
         clicked.&lt;/p&gt;
         &lt;p&gt;General Behaviour&lt;/p&gt;
         &lt;p&gt;Both the encode and decode behavior require the ability to
         get
         the id/name for a hidden field, &lt;span
         class="changed_added_2_0"&gt;which may be rendered in markup or
         which
         may be programmatically added via client DOM manipulation&lt;/span&gt;,
         whose value is set by the JavaScript form submit. This name must
         be constructed as follows:&lt;/p&gt;
         &lt;ul&gt;
         &lt;li&gt;&lt;p&gt;Get the clientId for the form of which this
         component is a
         child.&lt;/p&gt;&lt;/li&gt;
         &lt;li&gt;&lt;p&gt;Append
         &lt;code&gt;NamingContainer.SEPARATOR_CHAR&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
         &lt;li&gt;&lt;p&gt;Append a constant string that is the same for all
         command
         link components in the tree.&lt;/p&gt;&lt;/li&gt;
         &lt;/ul&gt;
         &lt;p&gt;In the following text, this String is called
         hiddenFieldName.&lt;/p&gt;
         &lt;p&gt;Decode Behavior&lt;/p&gt;
         &lt;ul&gt;
         &lt;p&gt;Obtain the "clientId" property of the component. Obtain the
         &lt;code&gt;Map&lt;/code&gt; from the "requestParameterMap" property
         of the
         &lt;code&gt;ExternalContext&lt;/code&gt;. Derive hiddenFieldName as
         above.
         Get the entry in the &lt;code&gt;Map&lt;/code&gt; under the key that
         is the
         hiddenFieldName. If the there is no entry, or the entry is the
         empty String, or the entry is not equal to the value of the
         "clientId" property, return immediately. If there is an entry,
         and its value is equal to the value of the "clientId" property,
         create a new &lt;code&gt;javax.faces.event.ActionEvent&lt;/code&gt;
         instance
         around the component and call &lt;code&gt;queueActionEvent()&lt;/code&gt;
         on
         the component, passing the event.&lt;/p&gt;
         &lt;/ul&gt;
         &lt;p&gt;Encode Behavior&lt;/p&gt;
         &lt;ul&gt;
         &lt;p&gt;If the value of the &lt;code&gt;disabled&lt;/code&gt;
         attribute is
         &lt;code&gt;true&lt;/code&gt;, render a span element. Render all the
         passthru
         attributes and the &lt;code&gt;target&lt;/code&gt; attribute as
         pass-through
         attributes on the span, even though the &lt;code&gt;target&lt;/code&gt;
         attribute will have no effect on a span. Render the current value
         of the component as the content of the span. Return.&lt;/p&gt;
         &lt;p&gt;If the &lt;code&gt;disabled&lt;/code&gt; attribute is not
         present, or its
         value is &lt;code&gt;false&lt;/code&gt;, render an HTML &lt;code&gt;a&lt;/code&gt;
         element. Render "#" as the value of the "href" attribute. Render
         the current value of the component as the link text if it is
         specified. Render JavaScript that is functionally equivalent to
         the following as the value of the "onclick" attribute:&lt;/p&gt;
         &lt;p&gt;&lt;code&gt;document.forms['CLIENT_ID']['hiddenFieldName'].value='CLIENT_ID';
         document.forms['CLIENT_ID']['PARAM1_NAME'].value='PARAM1_VALUE';
         document.forms['CLIENT_ID']['PARAM2_NAME'].value='PARAM2_VALUE';
         return false;&lt;/code&gt;&lt;/p&gt;
         &lt;p&gt;document.forms['CLIENT_ID'].submit()" where hiddenFieldName
         is
         as described above, CLIENT_ID is the clientId of the UICommand
         component, PARAM*_NAME and PARAM*_VALUE are the names and values,
         respectively, of any nested UIParameter children. The name and
         the value must be URLEncoded. If an "onclick" attribute was
         specified by the user, render this JavaScript in a function,
         and render the user's JavaScript in a function. Render both
         functions
         in a choice function as follows:&lt;/p&gt;
         &lt;p&gt;&lt;code&gt;var a=function(){#USER_FUNCTION#};
         var b=function(){#JSF_FUNCTION#};
         return (a()==false) ? false : b();&lt;/code&gt;&lt;/p&gt;
         &lt;p&gt;where #USER_FUNCTION# is the user's JavaScript and
         #JSF_FUNCTION# is the JavaScript rendered by JSF. The choice
         function should operate such that if the user's JavaScript returns
         true, then the rendered JavaScript will also execute.&lt;/p&gt;
         &lt;p&gt;If the "styleClass" attribute is specified, render its
         value as
         the value of the "class" attribute. Render any non-UIParameter
         output children as normal inside of the "a" element. These will
         appear as the link text. Allow the form renderer to output a
         single "input" element (for the entire page, regardless of how
         many command link components are in the page) of "type" "hidden"
         whose "name" is the value of hiddenFieldName, and which must not
         have a "value" attribute. Multiple occurrences of command link
         components in the tree should not cause multiple hiddenFieldName
         hidden fields. Allow the form renderer to output an "input"
         element of "type" "hidden" for each of the nested UIParameter
         children, taking the name property (but not the value) from each
         one in turn. If the "disabled" attribute is specified, do not
         render the HTML "a" anchor element or its "href" attribute.
         Instead, render a "span" element. If the "styleClass" attribute
         is specified, render its value as the value of the "class"
         attribute on the "span". Render any pass-through attributes on
         the "span". The content of the span element comes from the value
         of the component or its children as specified above.&lt;/p&gt;
         &lt;p&gt;If the user specified a &lt;code&gt;target&lt;/code&gt;
         attribute, its
         value must be set using javascript since the &lt;code&gt;onclick&lt;/code&gt;
         handler will prevent the target attribute from being generated.
         This must be accomplished using JavaScript that is equivalent to
         the following.&lt;/p&gt;
         &lt;p&gt;&lt;code&gt;document.forms['CLIENT_ID'].target='TARGET';&lt;/code&gt;&lt;/p&gt;
         &lt;p&gt;Where TARGET is the value of the target attribute on the
         JSP
         tag.&lt;/p&gt;
         &lt;/ul&gt;
      </description>
      <tag-name>commandLink</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.commandLink</component-type>
      </component>
      <attribute>
         <description>
            MethodExpression representing the application action to invoke
            when this component is activated by the user. The expression
            must evaluate to a public method that takes no parameters, and
            returns an Object (the toString() of which is called to derive
            the logical outcome) which is passed to the NavigationHandler
            for this application.
         </description>
         <name>action</name>
         <required>false</required>
         <method-signature>java.lang.Object action()</method-signature>
      </attribute>
      <attribute>
         <description>
            &lt;p&gt;
            MethodExpression representing an action listener method that
            will be notified when this component is activated by the user.
            The expression must evaluate to a public method that takes an
            ActionEvent parameter, with a return type of void, &lt;span
            class="changed_added_2_0"&gt;or to a public method that takes no
            arguments with a return type of void. In the latter case, the
            method has no way of easily knowing where the event came from,
            but this can be useful in cases where a notification is needed
            that "some action happened".&lt;/span&gt;
            &lt;/p&gt;
         </description>
         <name>actionListener</name>
         <required>false</required>
         <method-signature>void actionListener(javax.faces.event.ActionEvent)
         </method-signature>
      </attribute>
      <attribute>
         <description>
            The component identifier for this component. This value must be
            unique within the closest parent component that is a naming
            container.
         </description>
         <name>id</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Flag indicating that, if this component is activated by the
            user,
            notifications should be delivered to interested listeners and
            actions
            immediately (that is, during Apply Request Values phase) rather
            than
            waiting until Invoke Application phase.
         </description>
         <name>immediate</name>
         <required>false</required>
         <type>boolean</type>
      </attribute>
      <attribute>
         <description>
            Flag indicating whether or not this component should be rendered
            (during Render Response Phase), or processed on any subsequent
            form submit. The default value for this property is true.
         </description>
         <name>rendered</name>
         <required>false</required>
         <type>boolean</type>
      </attribute>
      <attribute>
         <description>
            The current value of this component.
         </description>
         <name>value</name>
         <required>false</required>
         <type>java.lang.Object</type>
      </attribute>
      <attribute>
         <description>
            Access key that, when pressed, transfers focus
            to this element.
         </description>
         <name>accesskey</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            The character encoding of the resource designated
            by this hyperlink.
         </description>
         <name>charset</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            The position and shape of the hot spot on the screen
            (for use in client-side image maps).
         </description>
         <name>coords</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Direction indication for text that does not inherit
            directionality.
            Valid values are "LTR" (left-to-right) and "RTL"
            (right-to-left).
         </description>
         <name>dir</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Flag indicating that this element must never
            receive focus or be included in a subsequent
            submit.
         </description>
         <name>disabled</name>
         <required>false</required>
         <type>boolean</type>
      </attribute>
      <attribute>
         <description>
            The language code of the resource designated
            by this hyperlink.
         </description>
         <name>hreflang</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Code describing the language used in the generated markup
            for this component.
         </description>
         <name>lang</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when this element loses focus.
         </description>
         <name>onblur</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            clicked over this element.
         </description>
         <name>onclick</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            double clicked over this element.
         </description>
         <name>ondblclick</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when this element receives focus.
         </description>
         <name>onfocus</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a key is
            pressed down over this element.
         </description>
         <name>onkeydown</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a key is
            pressed and released over this element.
         </description>
         <name>onkeypress</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a key is
            released over this element.
         </description>
         <name>onkeyup</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            pressed down over this element.
         </description>
         <name>onmousedown</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            moved within this element.
         </description>
         <name>onmousemove</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            moved away from this element.
         </description>
         <name>onmouseout</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            moved onto this element.
         </description>
         <name>onmouseover</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Javascript code executed when a pointer button is
            released over this element.
         </description>
         <name>onmouseup</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            The relationship from the current document
            to the anchor specified by this hyperlink.
            The value of this attribute is a space-separated
            list of link types.
         </description>
         <name>rel</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            A reverse link from the anchor specified
            by this hyperlink to the current document.
            The value of this attribute is a space-separated
            list of link types.
         </description>
         <name>rev</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            The shape of the hot spot on the screen
            (for use in client-side image maps). Valid
            values are: default (entire region); rect
            (rectangular region); circle (circular region);
            and poly (polygonal region).
         </description>
         <name>shape</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            CSS style(s) to be applied when this component is rendered.
         </description>
         <name>style</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Space-separated list of CSS style class(es) to be applied when
            this element is rendered. This value must be passed through
            as the "class" attribute on generated markup.
         </description>
         <name>styleClass</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Position of this element in the tabbing order
            for the current document. This value must be
            an integer between 0 and 32767.
         </description>
         <name>tabindex</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Name of a frame where the resource
            retrieved via this hyperlink is to
            be displayed.
         </description>
         <name>target</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            Advisory title information about markup elements generated
            for this component.
         </description>
         <name>title</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            The content type of the resource designated
            by this hyperlink.
         </description>
         <name>type</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>
            The ValueExpression linking this component to a property in a
            backing bean
         </description>
         <name>binding</name>
         <required>false</required>
         <type>javax.faces.component.UIComponent</type>
      </attribute>
      <attribute>
         <description>Bootstrap glyphicon class</description>
         <name>glyphicon</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>Disables link on click. Enables link on ajax complete. Default is true</description>
         <name>ajaxDisableLinkOnRequest</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <description>Show processing dots if (ajax) request is running. Needs disableOnClick to be true. Default
            is true
         </description>
         <name>ajaxShowWaitingDotsOnRequest</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <description>Displayed processing text while (ajax) request is running. Needs disableOnClick to be true.
            Default is 'Processing'.
         </description>
         <name>ajaxProcessingTextOnRequest</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <description>Hides glyphicon while (ajax) request is running. Needs disableOnClick to be true. Default is
            'true'.
         </description>
         <name>ajaxHideGlyphiconOnRequest</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <description>Disables regions to render after request while (ajax) request is running. Needs disableOnClick
            to be true. Default is true.
         </description>
         <name>ajaxDisableRenderRegionsOnRequest</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>tree</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.tree</component-type>
      </component>
      <attribute>
         <description>
            The component identifier for this component. This value must be
            unique within the closest parent component that is a naming
            container.
         </description>
         <name>id</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <description>Tree model value.</description>
         <name>value</name>
         <type>de.larmic.butterfaces.model.tree.Node</type>
         <required>true</required>
      </attribute>
      <attribute>
         <description>Selection listener called on selection changed.</description>
         <name>nodeSelectionListener</name>
         <type>de.larmic.butterfaces.event.TreeNodeSelectionListener</type>
      </attribute>
      <attribute>
         <name>hideRootNode</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>waitingPanel</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.waitingPanel</component-type>
      </component>
      <attribute>
         <description>
            The component identifier for this component. This value must be
            unique within the closest parent component that is a naming
            container.
         </description>
         <name>id</name>
         <required>false</required>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>blockpage</name>
         <type>java.lang.Boolean</type>
         <description>blocks page on ajax request directly by using a tranparent overlay. After delay it overlay will be visible. </description>
      </attribute>
      <attribute>
         <description>
            Delay to open waiting panel. Short ajax request should not trigger a waiting panel.
            Default is 500 ms.
         </description>
         <name>delay</name>
         <type>java.lang.Integer</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>defaultAction</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.defaultAction</component-type>
      </component>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>autoComplete</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.autoComplete</component-type>
      </component>
      <attribute>
         <name>autoComplete</name>
         <type>de.larmic.butterfaces.model.text.AutoCompleteModel</type>
         <required>true</required>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
   </tag>

   <tag>
      <tag-name>labeledContainer</tag-name>
      <component>
         <component-type>de.larmic.butterfaces.component.labeledContainer</component-type>
      </component>
      <attribute>
         <name>label</name>
         <type>java.lang.String</type>
         <description>Renders a label in front of input component and adds label attribute to input component.
         </description>
      </attribute>
      <attribute>
         <name>hideLabel</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>rendered</name>
         <type>java.lang.Boolean</type>
      </attribute>
      <attribute>
         <name>style</name>
         <type>java.lang.String</type>
      </attribute>
      <attribute>
         <name>styleClass</name>
         <type>java.lang.String</type>
      </attribute>
   </tag>

</facelet-taglib>