<ui:composition template="/WEB-INF/templates/defaultComponentBase.xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:showcase="http://xmlns.jcp.org/jsf/composite/cc"
                xmlns:common="http://xmlns.jcp.org/jsf/composite/common"
                xmlns:b="http://butterfaces.org/components"
                xmlns:f="http://xmlns.jcp.org/jsf/core">

    <ui:define name="header">
        <strong>b:commandLink</strong> The commandLink tag renders an HTML element of the type "a".
        <p>See <a href="http://fortawesome.github.io/Font-Awesome/icons/"
                  target="_blank">Font Awesome Icons</a> for nice glyphicons.</p>
    </ui:define>

    <ui:define name="tagsContainers">
        <common:tagsContainer label="Tag attributes">
            <b:text label="value" value="#{commandLinkShowcase.value}">
                <f:ajax event="keyup" execute="@this" render="output"/>
            </b:text>
            <b:checkBox label="disabled" value="#{commandLinkShowcase.disabled}">
                <f:ajax event="change" execute="@this" render="output"/>
            </b:checkBox>
            <b:checkBox label="rendered" value="#{commandLinkShowcase.rendered}">
                <f:ajax event="change" execute="@this" render="output"/>
            </b:checkBox>
            <b:treeBox label="glyphicon" value="#{commandLinkShowcase.glyphicon}" values="#{commandLinkShowcase.glyphicons}" required="true" showClearButton="false">
                <f:ajax event="change" execute="@this" render="output"/>
            </b:treeBox>
            <b:checkBox label="ajaxDisableLinkOnRequest" value="#{commandLinkShowcase.ajaxDisableLinkOnRequest}">
                <f:ajax event="change" execute="@this" render="output"/>
                <b:tooltip title="ajaxDisableLinkOnRequest" placement="top">
                    Disables link on click. Enables link on ajax complete. Default is true.
                </b:tooltip>
            </b:checkBox>
            <b:checkBox label="ajaxShowWaitingDotsOnRequest" value="#{commandLinkShowcase.ajaxShowWaitingDotsOnRequest}">
                <f:ajax event="change" execute="@this" render="output"/>
                <b:tooltip title="ajaxShowWaitingDotsOnRequest" placement="top">
                    Show processing dots if (ajax) request is running. Needs disableOnClick to be true. Default is true.
                </b:tooltip>
            </b:checkBox>
            <b:checkBox label="ajaxHideGlyphiconOnRequest" value="#{commandLinkShowcase.ajaxHideGlyphiconOnRequest}">
                <f:ajax event="change" execute="@this" render="output"/>
                <b:tooltip title="ajaxHideGlyphiconOnRequest" placement="top">
                    Hides glyphicon while (ajax) request is running. Needs disableOnClick to be true. Default is 'true'.
                </b:tooltip>
            </b:checkBox>
            <b:checkBox label="ajaxDisableRenderRegionsOnRequest" value="#{commandLinkShowcase.ajaxDisableRenderRegionsOnRequest}">
                <f:ajax event="change" execute="@this" render="output"/>
                <b:tooltip title="ajaxDisableRenderRegionsOnRequest" placement="top">
                    Disables regions to render after request while (ajax) request is running. Needs disableOnClick to be true. Default is true.
                </b:tooltip>
            </b:checkBox>
            <b:text label="ajaxProcessingTextOnRequest" value="#{commandLinkShowcase.ajaxProcessingText}">
                <f:ajax event="keyup" execute="@this" render="output"/>
                <b:tooltip title="ajaxProcessingTextOnRequest" placement="top">
                    Displayed processing text while (ajax) request is running. Needs disableOnClick to be true. Default is 'Processing'.
                </b:tooltip>
            </b:text>
            <b:text label="ajaxProcessingGlyphicon" value="#{commandLinkShowcase.ajaxProcessingGlyphicon}">
                <f:ajax event="keyup" execute="@this" render="output"/>
                <b:tooltip title="ajaxProcessingGlyphicon" placement="top">
                    Displayed processing glyphicon while (ajax) request is running. Needs disableOnClick to be true. Default is empty (no special glyphicon is rendered).
                </b:tooltip>
            </b:text>
        </common:tagsContainer>

        <common:tagsContainer label="Tag controls">
            <b:treeBox label="submit" value="#{commandLinkShowcase.commandLinkExampleType}" values="#{commandLinkShowcase.commandLinkExamples}" required="true" showClearButton="false">
                <f:ajax event="change" execute="@this" render="output"/>
            </b:treeBox>
            <b:treeBox label="link type" value="#{commandLinkShowcase.style}" values="#{commandLinkShowcase.styles}" required="true" showClearButton="false">
                <f:ajax event="change" execute="@this" render="output"/>
            </b:treeBox>
            <b:treeBox label="ajax rendering" value="#{commandLinkShowcase.render}" values="#{commandLinkShowcase.renders}" required="true" showClearButton="false">
                <f:ajax event="change" execute="@this" render="output"/>
            </b:treeBox>
        </common:tagsContainer>
    </ui:define>

    <ui:define name="output">
        <h:panelGroup rendered="#{commandLinkShowcase.commandLinkExampleType eq 'AJAX'}">

            <h:panelGroup layout="block"
                          rendered="#{commandLinkShowcase.ajaxDisableLinkOnRequest}"
                          styleClass="alert alert-warning">
                <strong>Attention</strong> To show attribute
                <l>ajaxDisableLinkOnRequest</l>
                action method will wait 2 seconds.
            </h:panelGroup>

            <b:commandLink glyphicon="#{commandLinkShowcase.selectedGlyphicon}"
                           value="#{commandLinkShowcase.value}"
                           action="#{commandLinkShowcase.increaseClickWithDelay}"
                           styleClass="#{commandLinkShowcase.selectedStyle}"
                           disabled="#{commandLinkShowcase.disabled}"
                           ajaxDisableLinkOnRequest="#{commandLinkShowcase.ajaxDisableLinkOnRequest}"
                           ajaxProcessingTextOnRequest="#{commandLinkShowcase.ajaxProcessingText}"
                           ajaxProcessingGlyphiconOnRequest="#{commandLinkShowcase.ajaxProcessingGlyphicon}"
                           ajaxHideGlyphiconOnRequest="#{commandLinkShowcase.ajaxHideGlyphiconOnRequest}"
                           ajaxDisableRenderRegionsOnRequest="#{commandLinkShowcase.ajaxDisableRenderRegionsOnRequest}"
                           ajaxShowWaitingDotsOnRequest="#{commandLinkShowcase.ajaxShowWaitingDotsOnRequest}"
                           actionListener="#{commandLinkShowcase.actionListener}"
                           rendered="#{commandLinkShowcase.rendered}">
                <f:ajax render="#{commandLinkShowcase.selectedRender}" onevent="logTest"/>
            </b:commandLink>

            <b:commandLink glyphicon="#{commandLinkShowcase.selectedGlyphicon}"
                           value="other link"
                           action="#{commandLinkShowcase.increaseClickWithDelay()}"
                           styleClass="#{commandLinkShowcase.selectedStyle}"
                           style="margin-left: 20px"
                           disabled="#{commandLinkShowcase.disabled}"
                           ajaxDisableLinkOnRequest="#{commandLinkShowcase.ajaxDisableLinkOnRequest}"
                           ajaxProcessingTextOnRequest="#{commandLinkShowcase.ajaxProcessingText}"
                           ajaxProcessingGlyphiconOnRequest="#{commandLinkShowcase.ajaxProcessingGlyphicon}"
                           ajaxHideGlyphiconOnRequest="#{commandLinkShowcase.ajaxHideGlyphiconOnRequest}"
                           ajaxDisableRenderRegionsOnRequest="#{commandLinkShowcase.ajaxDisableRenderRegionsOnRequest}"
                           ajaxShowWaitingDotsOnRequest="#{commandLinkShowcase.ajaxShowWaitingDotsOnRequest}"
                           rendered="#{commandLinkShowcase.rendered and commandLinkShowcase.ajaxDisableRenderRegionsOnRequest and commandLinkShowcase.ajaxDisableLinkOnRequest}">
                <f:ajax render="disableOnOtherRequest" execute="@this"/>
            </b:commandLink>

            <hr/>

            <h:panelGroup layout="block"
                          rendered="#{commandLinkShowcase.ajaxDisableLinkOnRequest and commandLinkShowcase.ajaxDisableRenderRegionsOnRequest}">

                <div class="row">
                    <div class="col-md-6">
                        <b:section id="disabledOnRequest"
                                   label="disabled on request by first link">
                            <div class="alert alert-info">
                                This section will be updated after click action is finished. While ajax request is running
                                this section will be disabled.
                            </div>
                            <span class="arquillian_component_clicks">#{commandLinkShowcase.clicks}</span> clicks
                        </b:section>
                    </div>
                    <div class="col-md-6">
                        <b:section id="disableOnOtherRequest"
                                   label="disabled on request by other link">
                            <div class="alert alert-info">
                                This section will be updated after other click action is finished. While ajax request this
                                section will be disabled.
                            </div>
                            <span class="arquillian_component_clicks">#{commandLinkShowcase.clicks}</span> clicks
                        </b:section>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <b:section id="otherDisabledOnRequest"
                                   label="another disabled on request">
                            <div class="alert alert-info">
                                This section will be updated after click action is finished. While ajax request is running
                                this section will be disabled.
                            </div>
                            <span class="arquillian_component_clicks">#{commandLinkShowcase.clicks}</span> clicks
                        </b:section>
                    </div>
                </div>

            </h:panelGroup>
        </h:panelGroup>

        <h:panelGroup rendered="#{commandLinkShowcase.commandLinkExampleType eq 'NO_AJAX'}">
            <b:commandLink glyphicon="#{commandLinkShowcase.selectedGlyphicon}"
                           value="#{commandLinkShowcase.value}"
                           action="#{commandLinkShowcase.increaseClick}"
                           styleClass="#{commandLinkShowcase.selectedStyle}"
                           disabled="#{commandLinkShowcase.disabled}"
                           ajaxDisableLinkOnRequest="#{commandLinkShowcase.ajaxDisableLinkOnRequest}"
                           ajaxProcessingTextOnRequest="#{commandLinkShowcase.ajaxProcessingText}"
                           ajaxHideGlyphiconOnRequest="#{commandLinkShowcase.ajaxHideGlyphiconOnRequest}"
                           ajaxDisableRenderRegionsOnRequest="#{commandLinkShowcase.ajaxDisableRenderRegionsOnRequest}"
                           ajaxShowWaitingDotsOnRequest="#{commandLinkShowcase.ajaxShowWaitingDotsOnRequest}"
                           rendered="#{commandLinkShowcase.rendered}">
            </b:commandLink>

            <hr/>

            <h:panelGroup id="clicks" layout="block">
                #{commandLinkShowcase.clicks} clicks
            </h:panelGroup>
        </h:panelGroup>

        <h:panelGroup rendered="#{commandLinkShowcase.commandLinkExampleType eq 'RESET_VALUES'}">
            <div class="alert alert-info">
                Default JSF2 resetValues command button or link attribute does not reset all values in a form. It only
                work if command link executes only one field. ButterFaces command link component resets all values.
                Try it by submitting text field with empty value to create a validation error and clicks each of render
                buttons.
            </div>

            <div class="row">
                <h:panelGroup id="rerenderArea" styleClass="col-md-10">
                    <b:text label="Not null value"
                            value="#{commandLinkShowcase.resetValue}"
                            placeholder="do not enter text, just click submit button to create validation error"
                            required="true"/>
                </h:panelGroup>

                <div class="col-md-2">
                    <b:commandLink id="submit" value="Submit" styleClass="btn btn-success">
                        <f:ajax execute="rerenderArea" render="rerenderArea"/>
                    </b:commandLink>
                </div>
            </div>

            <b:commandLink value="render (no resetValues)"
                           styleClass="btn btn-outline-secondary"
                           style="margin-right:4px;">
                <f:ajax execute="@this" render="rerenderArea submit"/>
            </b:commandLink>

            <b:commandLink value="render (reset values)"
                           styleClass="btn btn-outline-secondary"
                           style="margin-right:4px;">
                <f:ajax execute="@this" render="rerenderArea submit" resetValues="true"/>
            </b:commandLink>

            <h:commandLink value="render (reset values but JSF2 default command link)"
                           styleClass="btn btn-outline-secondary">
                <f:ajax execute="@this" render="rerenderArea submit" resetValues="true"/>
            </h:commandLink>
        </h:panelGroup>

    </ui:define>

    <ui:define name="other">

        <common:codeExamples component="#{commandLinkShowcase}"/>

        <script type="text/javascript">
            jQuery(document).ready(function () {
                setActiveNavigation('commandLink');
            });

            function logTest(data) {
                console.log('showcase log: onevent is called with data ' + data);
            }
        </script>
    </ui:define>
</ui:composition>
